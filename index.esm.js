import{jsx}from"react/jsx-runtime";import{Animated,StyleSheet,View,Text,Platform,Appearance}from"react-native";import{useMemo,useRef,useState,useCallback,useEffect,memo}from"react";const AnimatedPixel=memo((({active:active,borderRadius:borderRadius,duration:duration,size:size,activeColor:activeColor,inactiveColor:inactiveColor})=>{const indexRef=useRef(active?1:0),animation=useRef(new Animated.Value(indexRef.current)).current,backgroundColor=animation.interpolate({inputRange:[0,1],outputRange:[inactiveColor,activeColor]}),changeColor=useCallback((()=>{indexRef.current=0===indexRef.current?1:0,Animated.timing(animation,{toValue:indexRef.current,duration:duration,useNativeDriver:!1}).start()}),[]);return useEffect((()=>{active!==Boolean(indexRef.current)&&changeColor()}),[active,changeColor]),jsx(Animated.View,{style:[styles$1.Pixel,{borderRadius:borderRadius,width:size,height:size,backgroundColor:backgroundColor}]})})),StaticPixel=memo((({active:active,borderRadius:borderRadius,size:size,activeColor:activeColor,inactiveColor:inactiveColor})=>jsx(View,{style:[styles$1.Pixel,{borderRadius:borderRadius,width:size,height:size,backgroundColor:active?activeColor:inactiveColor}]}))),DebugPixel=memo((({coords:coords,active:active,borderRadius:borderRadius,size:size,activeColor:activeColor,inactiveColor:inactiveColor,textColor:textColor})=>jsx(View,{style:[styles$1.Pixel,{borderRadius:borderRadius,width:size,height:size,backgroundColor:active?activeColor:inactiveColor}],children:jsx(Text,{style:{fontSize:Math.min(size/2,14),color:textColor},children:coords})}))),styles$1=StyleSheet.create({Container:{flexDirection:"row",flexWrap:"wrap"},Pixel:{backgroundColor:"blue",justifyContent:"center",alignItems:"center"}});function useTheme(props){const systemScheme=(()=>{const[systemScheme,setSystemScheme]=useState(Appearance.getColorScheme());return useEffect((()=>{const listener=Appearance.addChangeListener((({colorScheme:colorScheme})=>setSystemScheme(colorScheme)));return()=>listener.remove()}),[]),systemScheme})();return useMemo((()=>{const scheme=(null==props?void 0:props.scheme)||systemScheme||"light",colors=props.defaultTheme[scheme];return Object.keys(colors).reduce(((obj,key)=>{var _a,_b,_c;return Object.assign(Object.assign({},obj),{[key]:(null===(_b=null===(_a=props.theme)||void 0===_a?void 0:_a[scheme])||void 0===_b?void 0:_b[key])||(null===(_c=props.theme)||void 0===_c?void 0:_c[key])||colors[key]})}),{})}),[props.defaultTheme,null==props?void 0:props.scheme,props.theme,systemScheme])}Platform.OS,Platform.OS,Platform.OS;const RetroGridDefaultColors={light:{textColor:"#000000",pixelActiveColor:"#D9D9D9",pixelInactiveColor:"#F9F9F9"},dark:{textColor:"#FFFFFF",pixelActiveColor:"#909090",pixelInactiveColor:"#202020"}},RetroGrid=memo((props=>{var _a;const{pixelSize:pixelSize,pixelsGap:pixelsGap,pixelsBorderRadius:pixelsBorderRadius,width:width,height:height,gridSize:gridSize}=(props=>useMemo((()=>{const pixelSize=props.pixelSize?Math.ceil(Math.abs(props.pixelSize)):5,pixelsGap=props.pixelsGap?Math.ceil(Math.abs(props.pixelsGap)):1,pixelsBorderRadius=Math.ceil(void 0===props.pixelsBorderRadius?pixelSize/5:Math.abs(props.pixelsBorderRadius)),gridSize=[Math.abs(props.gridSize[0]),Math.abs(props.gridSize[1])];return{pixelSize:pixelSize,pixelsGap:pixelsGap,pixelsBorderRadius:pixelsBorderRadius,width:gridSize[0]*(pixelSize+pixelsGap)-pixelsGap,height:gridSize[1]*(pixelSize+pixelsGap)-pixelsGap,gridSize:gridSize}}),[props.pixelSize,props.pixelsBorderRadius,props.pixelsGap,props.gridSize]))(props),{pixelActiveColor:pixelActiveColor,pixelInactiveColor:pixelInactiveColor,textColor:textColor}=useTheme({scheme:null===(_a=props.theme)||void 0===_a?void 0:_a.scheme,theme:props.theme,defaultTheme:RetroGridDefaultColors}),Pixel=useMemo((()=>props.pixelType&&"animated"!==props.pixelType?"debug"===props.pixelType?DebugPixel:StaticPixel:AnimatedPixel),[props.pixelType]),pixels=useMemo((()=>{const yCoords=Array.from({length:gridSize[0]}).map(((_,i)=>i));return Array.from({length:gridSize[1]}).flatMap(((_,x)=>yCoords.map((y=>[x,y].toString()))))}),[gridSize]);return jsx(View,{style:[styles.Container,{width:width,height:height,gap:pixelsGap}],children:jsx(Grid,{pixels:pixels,pixelSize:pixelSize,pixelsBorderRadius:pixelsBorderRadius,pixelActiveColor:pixelActiveColor,pixelInactiveColor:pixelInactiveColor,textColor:textColor,animate:props.animate,animateInterval:props.animateInterval,loopCount:props.loopCount,Pixel:Pixel})})})),Grid=({animate:animate,pixels:pixels,pixelSize:pixelSize,pixelsBorderRadius:pixelsBorderRadius,pixelActiveColor:pixelActiveColor,pixelInactiveColor:pixelInactiveColor,textColor:textColor,animateInterval:animateInterval,loopCount:loopCount,Pixel:Pixel})=>{const{activePixels:activePixels,animationDuration:animationDuration}=(props=>{const activeIndexRef=useRef(0),loopCounterRef=useRef(props.loopCount?Math.ceil(Math.abs(props.loopCount))*props.animate.length:null),[activePixels,setActivePixels]=useState([]),animationDuration=useMemo((()=>props.animateInterval||200),[props.animateInterval]),updateActivePixels=useCallback((()=>{const nextIndex=activeIndexRef.current+1,nextActivePixels=props.animate[activeIndexRef.current].map((([x,y,color])=>({color:color,active:!0,coords:`${x},${y}`})));setActivePixels((prev=>[...prev.filter((({active:active,coords:coords})=>active&&!nextActivePixels.some((nextPixel=>nextPixel.coords===coords)))).map((pixel=>Object.assign(Object.assign({},pixel),{active:!1}))),...nextActivePixels])),activeIndexRef.current=props.animate[nextIndex]?nextIndex:0,loopCounterRef.current&&(loopCounterRef.current-=1)}),[props.animate]);return useEffect((()=>{if(props.animate.length&&(activeIndexRef.current=0,updateActivePixels(),loopCounterRef.current||null===loopCounterRef.current)){const interval=setInterval((()=>{updateActivePixels(),loopCounterRef.current||null===loopCounterRef.current||clearInterval(interval)}),animationDuration);return()=>{clearInterval(interval)}}}),[props.animate,animationDuration,updateActivePixels]),{activePixels:activePixels,animationDuration:animationDuration}})({animate:animate,animateInterval:animateInterval,loopCount:loopCount});return pixels.map((coords=>{const activePixel=activePixels.find((pixel=>pixel.coords===coords));return jsx(Pixel,{coords:coords,active:!!(null==activePixel?void 0:activePixel.active),activeColor:(null==activePixel?void 0:activePixel.color)||pixelActiveColor,duration:animationDuration,size:pixelSize,borderRadius:pixelsBorderRadius,inactiveColor:pixelInactiveColor,textColor:textColor},coords)}))},styles=StyleSheet.create({Container:{position:"relative",flexDirection:"column",flexWrap:"wrap"}});export{RetroGrid};
